---
title: "Importing Data"
subtitle: "Introduction to R For Biologists and Bioinformatics"
author: "Dr Stevie Pederson"
institute: |
  | Black Ochre Data Labs
  | Telethon Kids Institute
date: "2023-09-17"
date-format: long
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [../custom.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
  html: 
    output-file: data_import.html
    embed-resources: true
    toc: true
    toc-depth: 1
knitr: 
  opts_chunk: 
    echo: true
    include: true
    warning: false
    message: false
    fig.align: center
---

# Bringing Data Into R {background-color="#3c3c44"}

## Data In R

- Working with data in R is **very different** to Excel
- Can have complicated structures or be very simple (e.g. `x <- 1:5`)
- Spreadsheet-like data is very common
    - Uses a data structure known as a `data.frame`
    - Has many variants, e.g. `tbl_df` or `tibble` (SQL-inspired)
    
. . .
    
- We import the data as an `R` object
    - All analysis is performed on the `R` object
- **Almost never** modify the source file


<!-- ## Setting Up For Today -->

<!-- - Before we start playing with data, we'll need some core packages -->
<!-- - Packages are a collection of functions which enable a set of tasks -->

<!-- . . . -->

<!-- In RStudio -->

<!-- 1. `Tools` > `Install Packages` -->
<!-- 2. Type the words `tidyverse`, `rmarkdown` and `pander` in the `Packages` Field -->
<!-- 3. Press `Enter` without modifying any of the defaults -->

<!-- . . . -->

<!-- This may run for a few minutes -->

<!-- ## Importing Data -->

<!-- - A point of confusion for many learning `R` are the *messages* you see -->
<!--     - We often see them while we're loading data -->
<!--     - Some are helpful messages but can be warnings -->
<!-- - A knowledge of data types is beneficial when using `R` -->
<!--     - `logical`, `integer`, `numeric`, `character` -->
<!-- - We can load `xlsx`, `xls`, `csv`, `txt`, files + many more -->

## Importing Data

- Things we do to make it "look nice" in Excel:
    - *Cell formatting will be ignored by R*
    - *Plots will also be ignored*
    - Blank rows are not fatal, just annoying
    - Mixtures of numbers and text in a column
    - Deleted cells are sometimes imported as blank rows/columns
- Comma-separated or tab-separated files are favoured for `R`
    
## Other Common Excel Issues

1. Excel thinks everything is a date:
    + Septin genes are now *SEPTIN2* etc
    + Fractions are also not dates...
2. Excel will remove leading zeroes (e.g. phone numbers, catalog ids)
    
## Preparation

1. `File` > `New File` > `R Script` (Or `Ctrl+Shift+N`)
2. Save as `DataImport.R`

. . .

Then get the data for this exercise.

1. Download the file `data.zip` from the workshop homepage
2. Place in your directory `R_Training`
2. Extract to create a folder named `data`
4. This should contain all of today's files
5. Navigate to the `data` directory using the `Files` pane

(You should see `rats.csv` in there)

::: {.notes}
Take a moment to make sure people haven't accidentally created `data/data`
:::

# Import Using the GUI {background-color="#3c3c44"}

## Importing Data

1. Preview the file `rats.csv` by clicking on it (`View File`)
    + Try in Excel if you prefer, but DO NOT save anything from Excel
    
. . .

- The data measures tooth length in rats using 3 dose levels of Vitamin C
    + Values are: "Low", "Med", "High"
- Vitamin C was given in drinking water or using orange juice
    + "OJ" or "VC"

## Importing Data

- This type of data is very easy to manage in `R`
    - Plain text with comma delimiters
    - Simple column structure with column names
    - No blank rows at the top or separating sub-tables
    - No blank columns
    - No rownames


## Using the GUI To Load Data {.smaller}

Click on the `rats.csv` and choose `Import Dataset` **then pause when you see the following**

![](assets/importGUI.png){width="900px"}


<p style="text-align: center;">(Click `Update` if you don't see this)</p>

## The Preview Window

<br>

![We have a preview of the data](assets/importGUI_preview.png){width="900px"}

::: {.notes}
This is another preview of the data before we import it
:::

## The Preview Window

<br>

![We also have a preview of the code we're about to execute](assets/importGUI_code.png){width="900px"}


## The Preview Window

1. Select and copy all the code in the `Code Preview` Box
    + (We'll paste this somewhere in a minute...)
2. Click `Import`
3. Magic happens!!!
    + Ignore the red/blue text. This is just 'helpful' information
    
. . . 

<br>

*Now paste the copied code into your script*

## What just happened? 

The code we copied has 3 lines:

```{r import-code, eval=FALSE}
#| code-line-numbers: '1'
library(readr)
rats <- read_csv("data/rats.csv")
View(rats)
```

- Loads the package `readr` using `library(readr)`
    + Packages are collections (i.e. libraries) of related functions
    + All `readr` functions are about importing data
- `readr` contains the function `read_csv()`
- `read_csv()` tells R what to do with a csv file
    
## What just happened? 

The code we copied has 3 lines:

```{r import-code2, eval=FALSE}
#| code-line-numbers: '2'
library(readr)
rats <- read_csv("data/rats.csv")
View(rats)
```

- This line actually loads the data into your `R Environment`
- It created an object named `rats` by using the file name (rats.csv)
- We can change this name easily


## What just happened?

The code we copied has 3 lines:

```{r import-code3, eval=FALSE}
#| code-line-numbers: '3'
library(readr)
rats <- read_csv("data/rats.csv")
View(rats)
```

- Opens a preview in a familiar `Excel-like` format
    + I personally **never** use this

Close the preview by clicking the cross

## What just happened?

- We have just loaded data using the default settings of `read_csv()`
- The object `rats` is now in our `R Environment`
    + The original file remains on our HDD **without modification**!!!
- The code is saved in our script <br> $\implies$ **we don't need the GUI for this operation again!**

## Let's Demonstrate

1. In the `Environment Tab` click the broom icon (![](assets/broom.png))
    + This will delete everything from your `R Environment`
    + It won't unload the packages
2. Select the code we've just pasted and send it to the console
    + (Reloading the packages won't hurt)
3. Check the `Environment Tab` again and `rats` is back

You can delete the line `View(rats)`

# Data Frame Objects {background-color="#3c3c44"}

## Data Frame Objects

- The object `rats` is known as a `data.frame`
- `R` equivalent to a spreadsheet
    - Missing values (blank cells) are usually filled with `NA`
    - **Must** have column names $\implies$ row names becoming less common

## Data Frame Objects

<br>Instead of `View()` $\implies$ preview by typing the object name

<br>

:::: {.columns}

::: {.column width='45%'}

```{r import-rats, echo=FALSE, include=FALSE}
library(readr)
rats <- read_csv(here::here("docs/data/rats.csv"))
```


```{r print-rats}
rats
```

:::

::: {.column width='55%'}


Gives a preview up to 10 lines with:

::: {.incremental}

- The object type: `A tibble`
- The full dimensions: `60 X 3`
- Column names: `len`, `supp`, `dose`
- Data types: `<dbl>`, `<chr>`, `<chr>`

:::

:::

::::

<br>

::: {.fragment}
I find this more informative than `View()`
:::


## Data Frame Objects

- `data.frame` objects can be subset using square brackets `[row, col]`

```{r subset-rats}
rats[1:3, ]
rats[, "len"]
```

## Data Frame Objects

- Entire columns can also be selected using `$` <br>$\implies$ doesn't return a `data.frame`

```{r}
rats$len
```

::: {.incremental}

- Each column is an `R` object known as *vector*
    + Literally like columns in a spreadsheet
- Vectors **must have all values as the same data type**
    + `logical`, `integer`, `numeric` (i.e. doubles), `character`
    + `len` values are all `numeric` (or `dbl`)
- All types are given when printing the object

:::


## Tibble Objects

- `readr` uses a variant called a `tbl_df` or `tbl` (pronounced tibble) 
    + A `data.frame` with nice bonus features (e.g. prints a summary only)
    + Similar to a SQL table
    + Can *only have row numbers for row names*
    + Is a foundational structure in the `tidyverse`


## The Tidyverse

- The `tidyverse` is a collection of *thematically-linked* packages from RStudio
    + Often referred to a *tidy*-programming or similar
- Calling `library(tidyverse)` loads **all** of these packages
    + $>$ 30 convenient packages in one line
    + `readr` is one of these $\implies$ usually just load the tidyverse
    
. . .

```{r load-tidyverse}
library(tidyverse)
tidyverse_packages()
```


## Tibble Objects

**Now replace `library(readr)` with `library(tidyverse)`** and execute

- Some additional ways to inspect data frames are:

```{r, eval=FALSE}
head(rats)
glimpse(rats)
```

**What were the differences between each method?**

# Functions {background-color="#3c3c44"}

## Functions in `R`

```{r, eval=FALSE}
head(rats)
glimpse(rats)
```

- Here we have called two functions: 1) `head()` and 2) `glimpse()`
    + They were both executed on the object `rats`

. . .

- Call the help page for `head()`

```r
?head
```

(if you get multiple options, choose the one from `utils`)

## Functions in `R`

- The key place to look at is

```r
head(x, ...)
## Default S3 method:
head(x, n = 6L, ...)
```

- This tells us we have two arguments to `head()`: `x` and `n`
    + `x` has no default value $\implies$ we need to provide something
    + `n = 6L` means `n` has a default value of 6 (L $\implies$ `integer`)
    
. . . 

- Lower down the page you'll see

**Arguments**

`x`	an object<br>
`n` an integer vector of length up to dim(x) (or 1, for non-dimensioned objects). *Blah, blah, blah...*

. . .

- Some of the rest is technical detail (sometimes *very helpful*)

## Function Arguments

- `head()` prints the *first part* of an object
- Useful for very large objects (e.g. if we had 1000 rats)

. . .

- We can change the number of rows shown to us

```{r}
head(rats, 4)
```

## Function Arguments

- Notice we didn't provide these as named arguments
- If passing values in order $\implies$ no need

. . .

```{r}
head(rats, 4)
head(x = rats, n = 4)
```

## Function Arguments

- If we name the arguments, we can pass *in any order we choose*

```{r}
head(n = 4, x = rats)
```

## Function Arguments

- Check the help page for `glimpse()`
    + This is from the package `pillar`
- Try changing the `width` argument to see what happens


## Understanding `read_csv()` 

- Earlier we called the `R` function `read_csv()`
- Check the help page

```{r, eval = FALSE}
?read_csv
```

- We have four functions shown but stick to `read_csv()`

## Understanding `read_csv()` 

```r
read_csv(
  file,
  col_names = TRUE, col_types = NULL, col_select = NULL,
  id = NULL, locale = default_locale(), 
  na = c("", "NA"), quoted_na = TRUE,
  quote = "\"", comment = "",
  trim_ws = TRUE,
  skip = 0, n_max = Inf,
  guess_max = min(1000, n_max),
  name_repair = "unique",
  num_threads = readr_threads(),
  progress = show_progress(),
  show_col_types = should_show_types(),
  skip_empty_rows = TRUE,
  lazy = should_read_lazy()
)
```

- This function has numerous *arguments* (`file`, `col_names` etc.)
- Most have default values given
    + All were defined *somewhere in the GUI*
    + The default assumes there are column names in the first row (`col_names = TRUE`)
    
. . .
    
- We'll explore some of the important ones later today

## Understanding `read_csv()` {visibility='hidden'}

```r
read_csv(
  file,
  col_names = TRUE, col_types = NULL, col_select = NULL,
  id = NULL, locale = default_locale(), 
  na = c("", "NA"), quoted_na = TRUE,
  quote = "\"", comment = "",
  trim_ws = TRUE,
  skip = 0, n_max = Inf,
  guess_max = min(1000, n_max),
  name_repair = "unique",
  num_threads = readr_threads(),
  progress = show_progress(),
  show_col_types = should_show_types(),
  skip_empty_rows = TRUE,
  lazy = should_read_lazy()
)
```

- If specifying in order, we don't need to name arguments

. . .

`rats <- read_csv("data/rats.csv")` 

is identical to  

`rats <- read_csv(file = "data/rats.csv")`

## Understanding `read_csv()` {visibility='hidden'}

All `arguments` for the function were defined somewhere in the GUI.

1. Open the GUI Preview by clicking on the file again
2. Uncheck the `First Row as Names` checkbox

![](assets/importGUI.png){width="900px"}

## Understanding `read_csv()` {visibility='hidden'}

All `arguments` for the function were defined somewhere in the GUI.

1. Open the GUI Preview by clicking on the file again
2. Uncheck the `First Row as Names` checkbox
    + *What happened to the code?*
    + *How did the columns change?*
    
. . . 

Try clicking/unclicking a few more & try understand the consequences

## Understanding `read_csv()` {visibility='hidden'}

__What if the first three lines were comments starting with `#`?__

- It could be the same, or we can specify the comment symbol

```{r, eval=FALSE}
rats <- read_csv("data/rats.csv", comment = "#")
```

# Closing Comments  {background-color="#3c3c44"}

## `read_csv()` Vs `read.csv()`

- `RStudio` now uses `read_csv()` from `readr` **by default**
- You will often see `read.csv()` in older scripts (from `utils`)
- The newer (`readr`) version is:
    + slightly faster
    + more user-friendly
    + creates fewer issues
    + gives informative messages
    
. . .    
    
- Earlier functions in `utils` are `read.*()` (csv, delim etc.)
- `readr` has the functions `read_*()` (csv, tsv, delim etc.)
- I always use the newer ones


## Reading Help Pages: Bonus Slide {visibility='hidden'}

- The bottom three functions are simplified wrappers to `read_delim()`
- `read_csv()` calls `read_delim()` using `delim = ","`
- `read_csv2()` calls `read_delim()` using `delim = ";"`
- `read_tsv()` calls `read_delim()` using `delim = "\t"`

<br>
__What function would we call for *space-delimited* files?__

## Loading Excel Files

- The package `readxl` is for loading `.xls` and `xlsx` files.
- Not part of the core tidyverse but **very** compatible

```{r}
library(readxl)
```

. . .

- The main function is `read_excel()`

```{r, eval=FALSE}
?read_excel
```

. . .

See if we can get to it later
