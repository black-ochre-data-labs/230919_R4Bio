---
title: "Introduction to R"
subtitle: "Importing Data"
author: "Dr Stevie Pederson"
institute: |
  | Black Ochre Data Labs
  | Telethon Kids Institute
date: "2023-09-17"
date-format: long
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [../custom.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
  html: 
    output-file: data_import.html
    embed-resources: true
knitr: 
  opts_chunk: 
    echo: true
    include: true
    warning: false
    message: false
    fig.align: center
---

# Bringing Data Into R {background-color="#3c3c44"}

## Data In R

- Working with data in R is **very different** to Excel
- Can have complicated structures or be very simple (e.g. `x <- 1:5`)
- Spreadsheet-like data is very common
    - Uses a data structure known as a `data.frame`
    - Has many variants, e.g. `tbl_df` or `tibble` (SQL-inspired)
    
. . .
    
- We import the data as an `R` object
    - All analysis is performed on the `R` object
- **Almost never** modify the source file


<!-- ## Setting Up For Today -->

<!-- - Before we start playing with data, we'll need some core packages -->
<!-- - Packages are a collection of functions which enable a set of tasks -->

<!-- . . . -->

<!-- In RStudio -->

<!-- 1. `Tools` > `Install Packages` -->
<!-- 2. Type the words `tidyverse`, `rmarkdown` and `pander` in the `Packages` Field -->
<!-- 3. Press `Enter` without modifying any of the defaults -->

<!-- . . . -->

<!-- This may run for a few minutes -->

<!-- ## Importing Data -->

<!-- - A point of confusion for many learning `R` are the *messages* you see -->
<!--     - We often see them while we're loading data -->
<!--     - Some are helpful messages but can be warnings -->
<!-- - A knowledge of data types is beneficial when using `R` -->
<!--     - `logical`, `integer`, `numeric`, `character` -->
<!-- - We can load `xlsx`, `xls`, `csv`, `txt`, files + many more -->


    
## Importing Data

First let's get the data for this exercise.

1. Download the file `data.zip` from the workshop homepage
2. Extract to create a folder named `data`
3. This should contain all of today's files

. . .

Preview the file by clicking on it in the `Files` pane (`View File`)

(Try in Excel if you prefer, but DO NOT save anything from Excel)

::: {.notes}
Make sure people haven't accidentally created `data/data`
:::

## Importing Data

- This is actually the type of format `R` loves to see
- Plain text with comma delimiters
- Simple column structure, with column names
- No blank rows at the top or separating sub-tables
- No blank columns

## Importing Data

- Things we do to make it "look nice" in Excel:
    - *Cell formatting will be ignored by R*
    - *Plots will also be ignored*
    - Blank rows are not fatal, just annoying
    - Mixtures of numbers and text in a column
    - Deleted cells are sometimes imported as blank rows/columns
    
<!-- ## Previewing in RStudio -->

<!-- 1. Close Excel (**don't save/overwrite the file**) -->
<!-- 2. Using the `Files` tab, enter the `data` directory -->
<!-- 3. Click on `rats.csv`  -->
<!-- 4. Select `View File` -->

<!-- This will open a preview in the *Script Window* pane (close when you're done) -->

## Before We Go On

1. `File` > `New File` > `R Script` (Or `Ctrl+Shift+N`)
2. Save as `DataImport.R`


# Import Using the GUI {background-color="#3c3c44"}

## Using the GUI To Load Data {.smaller}

Click on the file and choose `Import Dataset`

![](assets/importGUI.png){width="900px"}


<p style="text-align: center;">(Click `Update` if you don't see this)</p>

## The Preview Window

<br>

![](assets/importGUI_preview.png){width="900px"}

## The Preview Window

<br>

![](assets/importGUI_code.png){width="900px"}


## The Preview Window

1. Select and copy all the code in the `Code Preview` Box
    + (We'll paste this somewhere in a minute...)
2. Click `Import`
3. Magic happens!!!
    + Ignore the red/blue text. This is just 'helpful' information
    
. . . 

<br>

*Now paste the copied code into your script*

## What has just happened? 

The code we copied has 3 lines:

1. ```library(readr)```

- `readr` contains the function `read_csv()`
- Tells R what to do with each line/column of the file as it's read in
    
## What has just happened? 

The code we copied has 3 lines:

1. library(readr)
2. `rats <- read_csv("data/rats.csv")`

- This line loads the data into your `R Environment`
- It created an object named `rats` by using the file name.
    
## What has just happened?

<br>

![](assets/importGUI_name.png){width="900px"}


## What has just happened?

1. `library(readr)`
2. `rats <- read_csv("data/rats.csv")`
3. `View(rats)`
    + Opens a preview in a familiar `Excel-like` format
    + I **never** use this

Close the preview by clicking the cross and delete `View(rats)`

## Another way to see rats

```{r import-rats, echo=FALSE, include=FALSE}
library(readr)
rats <- read_csv(here::here("docs/data/rats.csv"))
```


```{r print-rats}
rats
```

. . .

<br>

This gives a preview with:

- The dimensions (`60 X 3`)
- Column names (`len`, `supp`, `dose`)
- Data types (`<dbl>`, `<chr>` etc)
    
## What has just happened?

- We have just loaded data using the default settings of `read_csv()`
    + The object `rats` is in our `R Environment`
    + The original file remains on our HDD **without modification**!!!
- Now we've saved the code in our script
    + $\implies$ **we don't need the GUI for this operation again!**

## Let's Demonstrate

1. In the `Environment Tab` click the broom icon (![](assets/broom.png))
    + This will delete everything from your `R Environment`
    + It won't unload the packages
2. Select the code we've just pasted and send it to the console
    + (Reloading the packages won't hurt)
3. Check the `Environment Tab` again and `rats` is back


## A Brief Side Note

- `RStudio` now uses `read_csv()` from the package `readr` by default
- Old scripts will often use `read.csv()` from the package `utils`
- The newer version is slightly faster and fails less
- It also gives informative messages
- Other functions in `utils` are `read.delim()` and `read.table()`
- `readr` has the functions `read_tsv()`, `read_delim()` and `read_table()` etc.


## Data Frame Objects

- The object `rats` is known as a `data.frame`
- `R` equivalent to a spreadsheet
- `readr` uses a variant called a `tbl_df` or `tibble` 
    + Like a `data.frame` with pretty bows & ribbons
    + Similar to a SQL table
    + Can only have row numbers for row names

. . .

<br>

```{r, eval = FALSE}
as.data.frame(rats)
```



## Data Frame Objects

- Some additional ways to inspect this are:

```{r, eval=FALSE}
rats
print(rats)
head(rats)
glimpse(rats)
```

**What were the differences between each method?**

## Data Frame Objects

- Each column is a vector
    + **Must contain data of the same type**
- We can access each column by typing the column name after a `$`

```{r,eval=FALSE}
rats$len
```

(We'll come back to this more tomorrow)

<!-- ## Data Frame Objects -->

<!-- - We can grab columns and rows using square brackets `[]` -->

<!-- ```{r,eval=FALSE} -->
<!-- rats[1:3, "len"] -->
<!-- ``` -->

<!-- - The `tibble` versions of `data.frame`s can only have row numbers for the rownames -->
<!-- - All `data.frame`/`tibble` objects must have column names. -->

## Understanding `read_csv()`

- In the above we called the `R` function `read_csv()`
- Check the help page

```{r, eval = FALSE}
?read_csv
```

- We have four functions but stick to `read_csv()`

## Understanding `read_csv()` 

```r
read_csv(
  file,
  col_names = TRUE, col_types = NULL, col_select = NULL,
  id = NULL, locale = default_locale(), 
  na = c("", "NA"), quoted_na = TRUE,
  quote = "\"", comment = "",
  trim_ws = TRUE,
  skip = 0, n_max = Inf,
  guess_max = min(1000, n_max),
  name_repair = "unique",
  num_threads = readr_threads(),
  progress = show_progress(),
  show_col_types = should_show_types(),
  skip_empty_rows = TRUE,
  lazy = should_read_lazy()
)
```

- This function has numerous *arguments* (`file`, `col_names` etc.)
- Most have 'default' values given
- If only the argument name is given(e.g. `file`) **we need to specify something**

## Understanding `read_csv()` 

```r
read_csv(
  file,
  col_names = TRUE, col_types = NULL, col_select = NULL,
  id = NULL, locale = default_locale(), 
  na = c("", "NA"), quoted_na = TRUE,
  quote = "\"", comment = "",
  trim_ws = TRUE,
  skip = 0, n_max = Inf,
  guess_max = min(1000, n_max),
  name_repair = "unique",
  num_threads = readr_threads(),
  progress = show_progress(),
  show_col_types = should_show_types(),
  skip_empty_rows = TRUE,
  lazy = should_read_lazy()
)
```

- If specifying in order, we don't need to name arguments

. . .

`rats <- read_csv("data/rats.csv")` 

is identical to  

`rats <- read_csv(file = "data/rats.csv")`

## Understanding `read_csv()`

All `arguments` for the function were defined somewhere in the GUI.

1. Open the GUI Preview by clicking on the file again
2. Uncheck the `First Row as Names` checkbox

![](assets/importGUI.png){width="900px"}

## Understanding `read_csv()`

All `arguments` for the function were defined somewhere in the GUI.

1. Open the GUI Preview by clicking on the file again
2. Uncheck the `First Row as Names` checkbox
    + *What happened to the code?*
    + *How did the columns change?*
    
. . . 

Try clicking/unclicking a few more & try understand the consequences

## Understanding `read_csv()`

__What if the first three lines were comments starting with `#`?__

- It could be the same, or we can specify the comment symbol

```{r, eval=FALSE}
rats <- read_csv("data/rats.csv", comment = "#")
```

## Reading Help Pages: Bonus Slide

- The bottom three functions are simplified wrappers to `read_delim()`
- `read_csv()` calls `read_delim()` using `delim = ","`
- `read_csv2()` calls `read_delim()` using `delim = ";"`
- `read_tsv()` calls `read_delim()` using `delim = "\t"`

<br>
__What function would we call for *space-delimited* files?__

## Loading Excel Files

`R` also has a package for loading `.xls` and `xlsx` files.

```{r}
library(readxl)
```

The main function is `read_excel()`

```{r, eval=FALSE}
?read_excel
```
